{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-13T23:13:45.586Z",
    "end": "2023-03-13T23:13:59.660Z",
    "duration": 14074,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "853f0be1-2a03-4197-81de-b17958020974",
      "title": "",
      "fullFile": "cypress/e2e/login-tests.cy.js",
      "file": "cypress/e2e/login-tests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7a8b136f-40cc-4090-995c-8c95865be027",
          "title": "Login Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows error message when credentials are incorrect",
              "fullTitle": "Login Tests Shows error message when credentials are incorrect",
              "timedOut": null,
              "duration": 7186,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/** Validate the error message when entering wrong credentials */\ncy.fixture(\"loginData\").then((loginData) => {\n    loginData.wrongCredentials.forEach((wrongCredential) => {\n        loginPage.login(wrongCredential.email, wrongCredential.password);\n        cy.get('[action=\"/login\"]').find('p').contains(wrongCredential.expectedOutput);\n    });\n});",
              "err": {},
              "uuid": "3a7cb9a7-6975-482c-8ee5-60ed286bfd8e",
              "parentUUID": "7a8b136f-40cc-4090-995c-8c95865be027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Shows error message when email or password are empty",
              "fullTitle": "Login Tests Shows error message when email or password are empty",
              "timedOut": null,
              "duration": 1816,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginData\").then((loginData) => {\n    loginData.emptyInputs.forEach((emptyInputs) => {\n    emptyInputs.email == '' ? loginPage.loginEmailField().clear() : loginPage.loginEmailField().type(emptyInputs.email);\n    emptyInputs.password == '' ? loginPage.loginPasswordField().clear() : loginPage.loginPasswordField().type(emptyInputs.password);\n    loginPage.loginButton().click();\n    if(emptyInputs.email==''){\n        loginPage.loginEmailField().then(($input) => {\n            expect($input[0].validationMessage).to.eq(emptyInputs.expectedMessage);\n        });\n    }else if(emptyInputs.password==''){\n        loginPage.loginPasswordField().then(($input) => {\n            expect($input[0].validationMessage).to.eq(emptyInputs.expectedMessage);\n        });\n    }        \n    })\n})",
              "err": {},
              "uuid": "db175e04-ca4c-4aa6-b3da-755a6d8cfc89",
              "parentUUID": "7a8b136f-40cc-4090-995c-8c95865be027",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Shows error message when email has invalid format",
              "fullTitle": "Login Tests Shows error message when email has invalid format",
              "timedOut": null,
              "duration": 3286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"loginData\").then((loginData) => {\n    loginData.invalidInputs.forEach((invalidInput) => {\n        loginPage.loginEmailField().clear().type(invalidInput.email);\n        loginPage.loginPasswordField().clear().type(invalidInput.password);\n        loginPage.loginButton().click();\n        loginPage.loginEmailField().then(($input) => {\n            expect($input[0].validationMessage).to.contain(invalidInput.expectedMessage);\n        });\n    });\n});",
              "err": {},
              "uuid": "02ace717-e089-479b-941d-2c733ed691ac",
              "parentUUID": "7a8b136f-40cc-4090-995c-8c95865be027",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3a7cb9a7-6975-482c-8ee5-60ed286bfd8e",
            "db175e04-ca4c-4aa6-b3da-755a6d8cfc89",
            "02ace717-e089-479b-941d-2c733ed691ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12288,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/report/mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}